{"version":3,"sources":["sortingAlgorithms/BubbleSort.js","sortingAlgorithms/MergeSort.js","sortingAlgorithms/QuickSort.js","sortingAlgorithms/SelectionSort.js","SortingVisualizer/SortingVisualizer.jsx","sortingAlgorithms/InsertionSort.js","App.js","index.js"],"names":["getBubbleSortAnimations","array","animations","auxillaryArray","slice","N","length","i","j","push","swap","bubbleSort","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","arraysAreEqual","firstIdx","secondIdx","temp","getMergeSortAnimations","mergeSort","auxiliaryArray","startIdx","endIdx","middleIdx","Math","floor","sortArray","merge","getQuickSortAnimations","quickSort","pivotIdx","pivot","partitionArray","getSelectionSortAnimations","minIdx","selectionSort","WINDOW_WIDTH","window","innerWidth","WINDOW_HEIGHT","innerHeight","NUMBER_OF_ARRAY_BARS","parseInt","onresize","ENABLED_BUTTON","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","restoreStoreButtons","document","getElementById","disabled","buttonStyle","style","title","cursor","background","disableSortButtons","isColorChanged","arrayBars","getElementsByClassName","color","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barIdx","newHeight","barStyle","height","RESTORE_TIME","key","insertionSort","getInsertionSortAnimations","className","position","right","map","value","idx","top","onClick","id","React","Component","App","ReactDOM","render"],"mappings":"iPAAO,SAASA,EAAwBC,GACpC,IAAIC,EAAa,GACbC,EAAiBF,EAAMG,SAQ/B,SAAoBD,EAAgBD,GAGhC,IAFA,IAAMG,EAAIF,EAAeG,OAEhBC,EAAI,EAAGA,EAAIF,EAAI,EAAGE,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAIE,EAAI,EAAGC,IAC3BN,EAAWO,KAAK,CAACD,EAAGA,EAAI,IACxBN,EAAWO,KAAK,CAACD,EAAGA,EAAI,IAEpBL,EAAeK,GAAKL,EAAeK,EAAI,IACvCN,EAAWO,KAAK,CAACD,EAAGL,EAAeK,EAAI,KACvCN,EAAWO,KAAK,CAACD,EAAI,EAAGL,EAAeK,KACvCE,EAAKP,EAAgBK,EAAGA,EAAI,KAG5BN,EAAWO,KAAK,EAAE,GAAI,IACtBP,EAAWO,KAAK,EAAE,GAAI,KAtBlCE,CAAWR,EAAgBD,GAC3B,IAAMU,EAAwBX,EAAMG,QAAQS,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAI,gCAgChB,SAAwBC,EAAYC,GAChC,GAAID,EAAWZ,SAAWa,EAAYb,OAClC,OAAO,EAEX,IAAK,IAAIC,EAAI,EAAGA,EAAIW,EAAWZ,OAAQC,IACnC,GAAIW,EAAWX,KAAOY,EAAYZ,GAC9B,OAAO,EAEf,OAAO,EAxCsCa,CAAeR,EAAuBT,IAE5E,CAACD,EADRD,EAAQE,GAyBZ,SAASO,EAAKP,EAAgBkB,EAAUC,GACpC,IAAIC,EAAOpB,EAAekB,GAC1BlB,EAAekB,GAAYlB,EAAemB,GAC1CnB,EAAemB,GAAaC,EClCzB,SAASC,EAAuBvB,GACnC,IAAIC,EAAa,GACbC,EAAiBF,EAAMG,SAQ/B,SAASqB,EAAUC,EAAgBC,EAAUC,EAAQ1B,GACjD,GAAIyB,IAAaC,EACb,OAEJ,IAAMC,EAAYC,KAAKC,OAAOJ,EAAWC,GAAU,GACnDH,EAAUC,EAAgBC,EAAUE,EAAW3B,GAC/CuB,EAAUC,EAAgBG,EAAY,EAAGD,EAAQ1B,GAIrD,SAAewB,EAAgBC,EAAUE,EAAWD,EAAQ1B,GACxD,IAAI8B,EAAY,GACZzB,EAAIoB,EACJnB,EAAIqB,EAAY,EAEpB,KAAOtB,GAAKsB,GAAarB,GAAKoB,GAE1B1B,EAAWO,KAAK,CAACF,EAAGC,IAMpBN,EAAWO,KAAK,CAACF,EAAGC,IAEhBkB,EAAenB,IAAMmB,EAAelB,IAGpCN,EAAWO,KAAK,CAACuB,EAAU1B,OAASqB,EAAUD,EAAenB,KAC7DyB,EAAUvB,KAAKiB,EAAenB,QAM9BL,EAAWO,KAAK,CAACuB,EAAU1B,OAASqB,EAAUD,EAAelB,KAC7DwB,EAAUvB,KAAKiB,EAAelB,OAItC,KAAOD,GAAKsB,GACR3B,EAAWO,KAAK,CAACF,EAAGA,IACpBL,EAAWO,KAAK,CAACF,EAAGA,IACpBL,EAAWO,KAAK,CAACuB,EAAU1B,OAASqB,EAAUD,EAAenB,KAC7DyB,EAAUvB,KAAKiB,EAAenB,MAGlC,KAAOC,GAAKoB,GACR1B,EAAWO,KAAK,CAACD,EAAGA,IACpBN,EAAWO,KAAK,CAACD,EAAGA,IACpBN,EAAWO,KAAK,CAACuB,EAAU1B,OAASqB,EAAUD,EAAelB,KAC7DwB,EAAUvB,KAAKiB,EAAelB,MAGlC,IAAK,IAAID,EAAIoB,EAAUpB,GAAKqB,EAAQrB,IAChCmB,EAAenB,GAAKyB,EAAUzB,EAAIoB,GAhDtCM,CAAMP,EAAgBC,EAAUE,EAAWD,EAAQ1B,GAdnDuB,CAAUtB,EAAgB,EAAGA,EAAeG,OAAS,EAAGJ,GACxD,IAAMU,EAAwBX,EAAMG,QAAQS,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IA+DZ,SAAwBC,EAAYC,GAChC,GAAID,EAAWZ,SAAWa,EAAYb,OAClC,OAAO,EAEX,IAAK,IAAIC,EAAI,EAAGA,EAAIW,EAAWZ,OAAQC,IACnC,GAAIW,EAAWX,KAAOY,EAAYZ,GAC9B,OAAO,EAEf,OAAO,EAvEKa,CAAeR,EAAuBT,IAE3C,CAACD,EADRD,EAAQE,GCNL,SAAS+B,EAAuBjC,GACnC,IAAIC,EAAa,GACbC,EAAiBF,EAAMG,SAU/B,SAAS+B,EAAUhC,EAAgBwB,EAAUC,EAAQ1B,GACjD,IAAIkC,EAEAT,EAAWC,IACXQ,EAMR,SAAwBjC,EAAgBwB,EAAUC,EAAQ1B,GAItD,IAHA,IAAImC,EAAQlC,EAAeyB,GACvBQ,EAAWT,EAENpB,EAAIoB,EAAUpB,GAAKqB,EAAS,EAAGrB,IACpCL,EAAWO,KAAK,CAACF,EAAGqB,IACpB1B,EAAWO,KAAK,CAACF,EAAGqB,IAEhBzB,EAAeI,IAAM8B,GAErBnC,EAAWO,KAAK,CAACF,EAAGJ,EAAeiC,KACnClC,EAAWO,KAAK,CAAC2B,EAAUjC,EAAeI,KAC1CG,EAAKP,EAAgBI,EAAG6B,GACxBA,MAGAlC,EAAWO,KAAK,EAAE,GAAI,IACtBP,EAAWO,KAAK,EAAE,GAAI,KAE1BP,EAAWO,KAAK,EAAE,GAAI,IACtBP,EAAWO,KAAK,EAAE,GAAI,IAW1B,OATAP,EAAWO,KAAK,EAAE,GAAI,IACtBP,EAAWO,KAAK,EAAE,GAAI,IACtBP,EAAWO,KAAK,EAAE,GAAI,IACtBP,EAAWO,KAAK,EAAE,GAAI,IAGtBP,EAAWO,KAAK,CAAC2B,EAAUjC,EAAeyB,KAC1C1B,EAAWO,KAAK,CAACmB,EAAQzB,EAAeiC,KACxC1B,EAAKP,EAAgBiC,EAAUR,GACxBQ,EArCQE,CAAenC,EAAgBwB,EAAUC,EAAQ1B,GAC5DiC,EAAUhC,EAAgBwB,EAAUS,EAAW,EAAGlC,GAClDiC,EAAUhC,EAAgBiC,EAAW,EAAGR,EAAQ1B,IAfpDiC,CAAUhC,EAAgB,EAAGA,EAAeG,OAAS,EAAGJ,GACxD,IAAMU,EAAwBX,EAAMG,QAAQS,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAI,+BAyDhB,SAAwBC,EAAYC,GAChC,GAAID,EAAWZ,SAAWa,EAAYb,OAClC,OAAO,EAEX,IAAK,IAAIC,EAAI,EAAGA,EAAIW,EAAWZ,OAAQC,IACnC,GAAIW,EAAWX,KAAOY,EAAYZ,GAC9B,OAAO,EAEf,OAAO,EAjEqCa,CAAeR,EAAuBT,IAE3E,CAACD,EADRD,EAAQE,GAkDZ,SAASO,EAAKP,EAAgBkB,EAAUC,GACpC,IAAIC,EAAOpB,EAAekB,GAC1BlB,EAAekB,GAAYlB,EAAemB,GAC1CnB,EAAemB,GAAaC,EC3DzB,SAASgB,EAA2BtC,GACvC,IAAIC,EAAa,GACbC,EAAiBF,EAAMG,SAQ/B,SAAuBD,EAAgBD,GAGnC,IAFA,IAAMG,EAAIF,EAAeG,OAEhBC,EAAI,EAAGA,EAAIF,EAAI,EAAGE,IAAK,CAI5B,IAFA,IAAIiC,EAASjC,EAEJC,EAAID,EAAI,EAAGC,EAAIH,EAAGG,IACvBN,EAAWO,KAAK,CAAC,cAAeD,EAAGgC,IACnCtC,EAAWO,KAAK,CAAC,cAAeD,EAAGgC,IAE/BrC,EAAeK,GAAKL,EAAeqC,KACnCA,EAAShC,GAEjBN,EAAWO,KAAK,CAAC,OAAQ+B,EAAQrC,EAAeI,KAChDL,EAAWO,KAAK,CAAC,OAAQF,EAAGJ,EAAeqC,KAG3C9B,EAAKP,EAAgBqC,EAAQjC,IAzBjCkC,CAActC,EAAgBD,GAC9B,IAAMU,EAAwBX,EAAMG,QAAQS,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAI,mCAiChB,SAAwBC,EAAYC,GAChC,GAAID,EAAWZ,SAAWa,EAAYb,OAClC,OAAO,EAEX,IAAK,IAAIC,EAAI,EAAGA,EAAIW,EAAWZ,OAAQC,IACnC,GAAIW,EAAWX,KAAOY,EAAYZ,GAC9B,OAAO,EAEf,OAAO,EAzCyCa,CAAeR,EAAuBT,IAE/E,CAACD,EADRD,EAAQE,GA0BZ,SAASO,EAAKP,EAAgBkB,EAAUC,GACpC,IAAIC,EAAOpB,EAAekB,GAC1BlB,EAAekB,GAAYlB,EAAemB,GAC1CnB,EAAemB,GAAaC,EDzBhCW,EAAuB,CAAC,EAAE,EAAE,EAAE,IED9B,IAAIQ,EAAeC,OAAOC,WACtBC,EAAgBF,OAAOG,YACvBC,EAAuBC,UAAUN,EAAe,KAAO,GAQ3DC,OAAOM,SANP,WACIP,EAAeC,OAAOC,WACtBC,EAAgBF,OAAOG,YACvBC,EAAuBC,UAAUN,EAAe,KAAO,IAK3D,IAMMQ,EACK,2BADLA,EAEO,yBAwTEC,M,kDApTX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAAEpD,MAAO,IAFP,E,gEAKKqD,KAAKC,e,mCAMzB,IAFA,IAuSuBC,EAAKC,EAvStBxD,EAAQ,GAELM,EAAI,EAAGA,EAAIwC,EAAsBxC,IACtCN,EAAMQ,MAoSa+C,EApSc,GAoSTC,EApSaZ,EAAgB,GAqStDf,KAAKC,MAAMD,KAAK4B,UAAYD,EAAMD,EAAM,GAAKA,KAlShDF,KAAKK,SAAS,CAAC1D,MAAOA,IACtBqD,KAAKM,wB,2CAILC,SAASC,eAAe,cAAcC,UAAW,EACjD,IAAIC,EAAcH,SAASC,eAAe,cAAcG,MACxDJ,SAASC,eAAe,cAAcI,MA7BtB,qBA8BhBF,EAAYG,OAAS,UACrBH,EAAYI,WAAa,UAEzBP,SAASC,eAAe,iBAAiBC,UAAW,EACpDC,EAAcH,SAASC,eAAe,iBAAiBG,MACvDJ,SAASC,eAAe,iBAAiBI,MAnCzB,qBAoChBF,EAAYG,OAAS,UACrBH,EAAYI,WAAa,UAEzBP,SAASC,eAAe,aAAaC,UAAW,EAChDC,EAAcH,SAASC,eAAe,aAAaG,MACnDJ,SAASC,eAAe,aAAaI,MAzCrB,qBA0ChBF,EAAYG,OAAS,UACrBH,EAAYI,WAAa,UAEzBP,SAASC,eAAe,aAAaC,UAAW,EAChDC,EAAcH,SAASC,eAAe,aAAaG,MACnDJ,SAASC,eAAe,aAAaI,MA/CrB,qBAgDhBF,EAAYG,OAAS,UACrBH,EAAYI,WAAa,UAEzBP,SAASC,eAAe,iBAAiBC,UAAW,EACpDC,EAAcH,SAASC,eAAe,iBAAiBG,MACvDJ,SAASC,eAAe,iBAAiBI,MArDzB,qBAsDhBF,EAAYG,OAAS,UACrBH,EAAYI,WAAa,Y,4CAIzBP,SAASC,eAAe,cAAcC,UAAW,EACjD,IAAIC,EAAcH,SAASC,eAAe,cAAcG,MACxDJ,SAASC,eAAe,cAAcI,MAAQhB,EAC9Cc,EAAYG,OAAS,UACrBH,EAAYI,WAAa,UAEzBP,SAASC,eAAe,iBAAiBC,UAAW,EACpDC,EAAcH,SAASC,eAAe,iBAAiBG,MACvDJ,SAASC,eAAe,iBAAiBI,MAAQhB,EACjDc,EAAYG,OAAS,UACrBH,EAAYI,WAAa,UAEzBP,SAASC,eAAe,aAAaC,UAAW,EAChDC,EAAcH,SAASC,eAAe,aAAaG,MACnDJ,SAASC,eAAe,aAAaI,MAAQhB,EAC7Cc,EAAYG,OAAS,UACrBH,EAAYI,WAAa,UAEzBP,SAASC,eAAe,aAAaC,UAAW,EAChDC,EAAcH,SAASC,eAAe,aAAaG,MACnDJ,SAASC,eAAe,aAAaI,MAAQhB,EAC7Cc,EAAYG,OAAS,UACrBH,EAAYI,WAAa,UAEzBP,SAASC,eAAe,iBAAiBC,UAAW,EACpDC,EAAcH,SAASC,eAAe,iBAAiBG,MACvDJ,SAASC,eAAe,iBAAiBI,MAAQhB,EACjDc,EAAYG,OAAS,UACrBH,EAAYI,WAAa,Y,mCAIf,IAAD,OACTd,KAAKe,qBAGL,IAJS,MAGuBrE,EAAwBsD,KAAKD,MAAMpD,OAH1D,mBAGFC,EAHE,KAIAK,GAJA,KAII,GAAGA,EAAIL,EAAWI,OAAQC,IAAK,CACxC,IAAM+D,EAAkB/D,EAAI,IAAM,GAAOA,EAAI,IAAM,EAC7CgE,EAAYV,SAASW,uBAAuB,aAElD,IAAsB,IAAnBF,GAA0B,WACzB,IAAMG,EAASlE,EAAI,IAAM,EAxGjB,MADF,YAwGkB,cAEOL,EAAWK,GAFlB,GAEjBmE,EAFiB,KAENC,EAFM,KAGlBC,EAAcL,EAAUG,GAAWT,MACnCY,EAAcN,EAAUI,GAAWV,MAKzCa,YAAW,WACPF,EAAYG,gBAAkBN,EAC9BI,EAAYE,gBAAkBN,IAjHvB,GAkHRlE,GAZsB,QAcxB,6CAC2BL,EAAWK,GADtC,GACMyE,EADN,KACcC,EADd,KAED,IAAgB,IAAZD,EAAkB,iBAEtB,IAAME,EAAWX,EAAUS,GAAQf,MACnCa,YAAW,WACPI,EAASC,OAAT,UAAqBF,EAArB,QA1HO,GA2HR1E,GAPF,GAEqB,SAQ9B,IAAM6E,EAAepC,SA9HF,GA8HgC9C,EAAWI,OAAS,EAAI,KAC3EwE,YAAW,kBAAM,EAAKlB,sBAAqBwB,K,sCAG9B,IAAD,OACZ9B,KAAKe,qBAGL,IAJY,MCzJb,SAAoCpE,GACvC,IAAIC,EAAa,GACbC,EAAiBF,EAAMG,SAQ/B,SAAuBD,EAAgBD,GAEnC,IADA,IAAMG,EAAIF,EAAeG,OAChBC,EAAI,EAAGA,EAAIF,EAAGE,IAAK,CACxB,IAAI8E,EAAMlF,EAAeI,GACrBC,EAAID,EAAI,EAGZ,IAFAL,EAAWO,KAAK,CAAC,cAAeD,EAAGD,IACnCL,EAAWO,KAAK,CAAC,cAAeD,EAAGD,IAC5BC,GAAK,GAAKL,EAAeK,GAAK6E,GACjCnF,EAAWO,KAAK,CAAC,YAAaD,EAAI,EAAGL,EAAeK,KACpDL,EAAeK,EAAI,GAAKL,EAAeK,IACvCA,GAAQ,IACC,IACLN,EAAWO,KAAK,CAAC,cAAeD,EAAGD,IACnCL,EAAWO,KAAK,CAAC,cAAeD,EAAGD,KAG3CL,EAAWO,KAAK,CAAC,YAAaD,EAAI,EAAG6E,IACrClF,EAAeK,EAAI,GAAK6E,GAxB5BC,CAAcnF,EAAgBD,GAC9B,IAAMU,EAAwBX,EAAMG,QAAQS,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAG/D,OAFAC,QAAQC,IAAI,mCA0BhB,SAAwBC,EAAYC,GAChC,GAAID,EAAWZ,SAAWa,EAAYb,OAClC,OAAO,EAEX,IAAK,IAAIC,EAAI,EAAGA,EAAIW,EAAWZ,OAAQC,IACnC,GAAIW,EAAWX,KAAOY,EAAYZ,GAC9B,OAAO,EAEf,OAAO,EAlCyCa,CAAeR,EAAuBT,IAE/E,CAACD,EADRD,EAAQE,GDqJ4BoF,CAA2BjC,KAAKD,MAAMpD,OAF1D,mBAELC,EAFK,KAIHK,GAJG,KAIC,GAAGA,EAAIL,EAAWI,OAAQC,IAAK,CACxC,IAAM+D,EAAuC,gBAArBpE,EAAWK,GAAG,IACQ,gBAArBL,EAAWK,GAAG,GACjCgE,EAAYV,SAASW,uBAAuB,cAE3B,IAAnBF,EAA0B,WAC1B,IAAMG,EAA8B,gBAArBvE,EAAWK,GAAG,GA7IrB,MADF,YA6ImB,cAEYL,EAAWK,GAFvB,GAEZmE,GAFY,WAEDC,EAFC,KAGnBC,EAAcL,EAAUG,GAAWT,MACnCY,EAAcN,EAAUI,GAAWV,MAEzCa,YAAW,WACPF,EAAYG,gBAAkBN,EAC9BI,EAAYE,gBAAkBN,IAnJvB,GAoJRlE,GATuB,GAWxB,WAAD,kBACiCL,EAAWK,GAD5C,GACYyE,GADZ,WACoBC,EADpB,KAEKC,EAAWX,EAAUS,GAAQf,MAEnCa,YAAW,WACPI,EAASC,OAAT,UAAqBF,EAArB,QA3JO,GA4JR1E,GAND,GASV,IAAM6E,EAAepC,SA/JF,GA+JgC9C,EAAWI,OAAS,EAAI,KAC3EwE,YAAW,kBAAM,EAAKlB,sBAAqBwB,K,kCAGlC,IAAD,OACR9B,KAAKe,qBAGL,IAJQ,MAEwB7C,EAAuB8B,KAAKD,MAAMpD,OAF1D,mBAEDC,EAFC,sBAICK,GACL,IAAM+D,EAAkB/D,EAAI,IAAM,EAC5BgE,EAAYV,SAASW,uBAAuB,aAElD,IAAuB,IAAnBF,EAAyB,CAAC,IAAD,cACMpE,EAAWK,GADjB,GAClBmE,EADkB,KACPC,EADO,KAEnBF,EAASlE,EAAI,IAAM,EA9KjB,MADF,YAgLAqE,EAAcL,EAAUG,GAAWT,MACnCY,EAAcN,EAAUI,GAAWV,MAEzCa,YAAW,WACPF,EAAYG,gBAAkBN,EAC9BI,EAAYE,gBAAkBN,IAnLvB,GAoLRlE,QAGHuE,YAAW,WAAO,IAAD,cACkB5E,EAAWK,GAD7B,GACNmE,EADM,KACKO,EADL,KAEOV,EAAUG,GAAWT,MAC7BkB,OAAZ,UAAwBF,EAAxB,QA1LO,GA2LR1E,KApBFA,EAAI,EAAGA,EAAIL,EAAWI,OAAQC,IAAM,EAApCA,GAuBT,IAAM6E,EAAepC,SA9LF,GA8LgC9C,EAAWI,OAAS,EAAI,KAC3EwE,YAAW,kBAAM,EAAKlB,sBAAqBwB,K,kCAGlC,IAAD,OACR9B,KAAKe,qBAGL,IAJQ,MAEwBnC,EAAuBoB,KAAKD,MAAMpD,OAF1D,mBAEDC,EAFC,KAICK,GAJD,KAIK,GAAGA,EAAIL,EAAWI,OAAS,EAAGC,IAAK,CAC5C,IAAM+D,EAAkB/D,EAAI,IAAM,GAAOA,EAAI,IAAM,EAC7CgE,EAAYV,SAASW,uBAAuB,aAElD,IAAuB,IAAnBF,GAAyB,2BACzB,IAAMG,EAASlE,EAAI,IAAM,EA5MjB,MADF,YA4MmB,cAEML,EAAWK,GAFjB,GAElBmE,EAFkB,KAEPC,EAFO,KAIzB,IAAmB,IAAfD,EAAoB,iBAExB,IAAME,EAAcL,EAAUG,GAAWT,MACnCY,EAAcN,EAAUI,GAAWV,MAEzCa,YAAW,WACPF,EAAYG,gBAAkBN,EAC9BI,EAAYE,gBAAkBN,IArNvB,GAsNRlE,GAZsB,GAID,cAUvB,6CAC2BL,EAAWK,GADtC,GACMyE,EADN,KACcC,EADd,KAGD,IAAgB,IAAZD,EAAiB,iBAErB,IAAME,EAAWX,EAAUS,GAAQf,MACnCa,YAAW,WACPI,EAASC,OAAT,UAAqBF,EAArB,QA/NO,GAgOR1E,GARF,GAGoB,SAQ7B,IAAM6E,EAAepC,SAnOF,GAmOgC9C,EAAWI,OAAS,EAAI,KAC3EwE,YAAW,kBAAM,EAAKlB,sBAAqBwB,K,sCAG9B,IAAD,OACZ9B,KAAKe,qBAGL,IAJY,MAEoB9B,EAA2Be,KAAKD,MAAMpD,OAF1D,mBAELC,EAFK,KAIHK,GAJG,KAIC,GAAGA,EAAIL,EAAWI,OAAQC,IAAK,CACxC,IAAM+D,EAAuC,gBAArBpE,EAAWK,GAAG,IACQ,gBAArBL,EAAWK,GAAG,GACjCgE,EAAYV,SAASW,uBAAuB,cAE3B,IAAnBF,EAA0B,WAC1B,IAAMG,EAA8B,gBAArBvE,EAAWK,GAAG,GAlPrB,MADF,YAkPmB,cAEYL,EAAWK,GAFvB,GAEZmE,GAFY,WAEDC,EAFC,KAGnBC,EAAcL,EAAUG,GAAWT,MACnCY,EAAcN,EAAUI,GAAWV,MAEzCa,YAAW,WACPF,EAAYG,gBAAkBN,EAC9BI,EAAYE,gBAAkBN,IAxPvB,GAyPRlE,GATuB,GAWxB,WAAD,kBACiCL,EAAWK,GAD5C,GACYyE,GADZ,WACoBC,EADpB,KAEKC,EAAWX,EAAUS,GAAQf,MAEnCa,YAAW,WACPI,EAASC,OAAT,UAAqBF,EAArB,QAhQO,GAiQR1E,GAND,GASV,IAAM6E,EAAepC,SApQF,GAoQgC9C,EAAWI,OAAS,EAAI,KAC3EwE,YAAW,kBAAM,EAAKlB,sBAAqBwB,K,+BAGrC,IAAD,OACCnF,EAAQqD,KAAKD,MAAMpD,MAIzB,OACI,oCACI,yBAAKuF,UAAU,kBAAkBvB,MAAO,CAACwB,SAAU,WAAYC,MAAM,SAChEzF,EAAM0F,KAAI,SAACC,EAAOC,GAAR,OACP,yBACIL,UAAU,YACVH,IAAKQ,EACL5B,MAAO,CACHc,gBAvRV,YAwRUI,OAAO,GAAD,OAAKS,EAAL,aAMtB,yBAAKJ,UAAU,WACX,4BAAQtB,MAAM,+BACVD,MAAO,CAACwB,SAAS,WAAYK,IAAI,GAAD,OAAI,GAAKjD,EAAgB,IAnBnD,EAmB0B,OAChCkD,QAAS,kBAAM,EAAKxC,eAFxB,sBAIA,4BAAQW,MAAM,yBAAyB8B,GAAG,aACtC/B,MAAO,CAACwB,SAAS,WAAYK,IAAI,GAAD,OAAI,IAAOjD,EAAgB,IAvBrD,EAuB0B,OAChCkD,QAAS,kBAAM,EAAKpF,eAFxB,eAIA,4BAAQuD,MAAM,yBAAyB8B,GAAG,gBACtC/B,MAAO,CAACwB,SAAS,WAAYK,IAAI,GAAD,OAAI,KAAOjD,EAAgB,IA3BrD,EA2B0B,OAChCkD,QAAS,kBAAM,EAAKT,kBAFxB,kBAIA,4BAAQpB,MAAM,2BAA2B8B,GAAG,YACxC/B,MAAO,CAACwB,SAAS,WAAYK,IAAI,GAAD,OAAI,KAAOjD,EAAgB,IA/BrD,EA+B0B,OAChCkD,QAAS,kBAAM,EAAKtE,cAFxB,cAIA,4BAAQyC,MAAM,yBAAyB8B,GAAG,YACtC/B,MAAO,CAACwB,SAAS,WAAYK,IAAI,GAAD,OAAI,KAAOjD,EAAgB,IAnCrD,EAmC0B,OAChCkD,QAAS,kBAAM,EAAK5D,cAFxB,cAIA,4BAAQ+B,MAAM,yBAAyB8B,GAAG,gBACtC/B,MAAO,CAACwB,SAAS,WAAYK,IAAI,GAAD,OAAI,KAAOjD,EAAgB,IAvCrD,EAuC0B,OAChCkD,QAAS,kBAAM,EAAKtD,kBAFxB,wB,GAxSYwD,IAAMC,W,MEpBvBC,MARf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,QCHNY,IAASC,OACP,kBAAC,EAAD,MACAxC,SAASC,eAAe,U","file":"static/js/main.a17a5d06.chunk.js","sourcesContent":["export function getBubbleSortAnimations(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    bubbleSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"bubble sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction bubbleSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n\r\n    for (let i = 0; i < N - 1; i++) {\r\n        for (let j = 0; j < N - i - 1; j++){\r\n            animations.push([j, j + 1]);\r\n            animations.push([j, j + 1]);\r\n\r\n            if (auxillaryArray[j] > auxillaryArray[j + 1]) {\r\n                animations.push([j, auxillaryArray[j + 1]]);\r\n                animations.push([j + 1, auxillaryArray[j]]);\r\n                swap(auxillaryArray, j, j + 1);\r\n            }\r\n            else {\r\n                animations.push([-1, -1]);\r\n                animations.push([-1, -1]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIdx, secondIdx) {\r\n    let temp = auxillaryArray[firstIdx];\r\n    auxillaryArray[firstIdx] = auxillaryArray[secondIdx];\r\n    auxillaryArray[secondIdx] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length)\r\n        return false;\r\n\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i])\r\n            return false;\r\n    }\r\n    return true;\r\n}","export function getMergeSortAnimations(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    mergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction mergeSort(auxiliaryArray, startIdx, endIdx, animations) {\r\n    if (startIdx === endIdx)\r\n        return;\r\n\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSort(auxiliaryArray, startIdx, middleIdx, animations);\r\n    mergeSort(auxiliaryArray, middleIdx + 1, endIdx, animations);\r\n    merge(auxiliaryArray, startIdx, middleIdx, endIdx, animations);\r\n}\r\n\r\nfunction merge(auxiliaryArray, startIdx, middleIdx, endIdx, animations) {\r\n    let sortArray = [];\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        // Comparing the values at i`th and j`th index so pushing them to change their color\r\n        animations.push([i, j]);\r\n\r\n        // By changing the colors of the current indexes, we imply that\r\n        // the value at those two indexes is being compared.push\r\n        // after performing the swap, we need to revert them \r\n        // to their original color so we push them again.\r\n        animations.push([i, j]);\r\n\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            // We should overwrite the value at (i+startIdx)th index with i`th index\r\n            // so we push them to highlight them and swap their heights.\r\n            animations.push([sortArray.length + startIdx, auxiliaryArray[i]]);\r\n            sortArray.push(auxiliaryArray[i++]);\r\n        }\r\n        else {\r\n            // Otherwise if the value at the i`th index is greater than the value at j`th index,\r\n            // we need to overwrite the value at (i+startIdx)th index with j`th index\r\n            // so we push them to highlight them and swap their heights.\r\n            animations.push([sortArray.length + startIdx, auxiliaryArray[j]]);\r\n            sortArray.push(auxiliaryArray[j++]);\r\n        }\r\n    }\r\n\r\n    while (i <= middleIdx) {\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([sortArray.length + startIdx, auxiliaryArray[i]]);\r\n        sortArray.push(auxiliaryArray[i++]);\r\n    }\r\n\r\n    while (j <= endIdx) {\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([sortArray.length + startIdx, auxiliaryArray[j]]);\r\n        sortArray.push(auxiliaryArray[j++]);\r\n    }\r\n\r\n    for (let i = startIdx; i <= endIdx; i++)\r\n        auxiliaryArray[i] = sortArray[i - startIdx];\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length)\r\n        return false;\r\n\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i])\r\n            return false;\r\n    }\r\n    return true;\r\n}","export function getQuickSortAnimations(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"quick sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\ngetQuickSortAnimations([7,2,1,6]);\r\n\r\nfunction quickSort(auxillaryArray, startIdx, endIdx, animations) {\r\n    let pivotIdx;\r\n\r\n    if (startIdx < endIdx) {\r\n        pivotIdx = partitionArray(auxillaryArray, startIdx, endIdx, animations);\r\n        quickSort(auxillaryArray, startIdx, pivotIdx - 1, animations);\r\n        quickSort(auxillaryArray, pivotIdx + 1, endIdx, animations);\r\n    }\r\n}\r\n\r\nfunction partitionArray(auxillaryArray, startIdx, endIdx, animations) {\r\n    let pivot = auxillaryArray[endIdx];\r\n    let pivotIdx = startIdx;\r\n\r\n    for (let i = startIdx; i <= endIdx - 1; i++) {\r\n        animations.push([i, endIdx]);\r\n        animations.push([i, endIdx]);\r\n\r\n        if (auxillaryArray[i] <= pivot) {\r\n            // Swap the two heights\r\n            animations.push([i, auxillaryArray[pivotIdx]]);\r\n            animations.push([pivotIdx, auxillaryArray[i]]);\r\n            swap(auxillaryArray, i, pivotIdx);\r\n            pivotIdx++;\r\n        }\r\n        else {\r\n            animations.push([-1, -1]);\r\n            animations.push([-1, -1]);\r\n        }\r\n        animations.push([-1, -1]);\r\n        animations.push([-1, -1]);\r\n    }\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n\r\n    // Swap these two heights\r\n    animations.push([pivotIdx, auxillaryArray[endIdx]]);\r\n    animations.push([endIdx, auxillaryArray[pivotIdx]]);\r\n    swap(auxillaryArray, pivotIdx, endIdx);\r\n    return pivotIdx;\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIdx, secondIdx) {\r\n    let temp = auxillaryArray[firstIdx];\r\n    auxillaryArray[firstIdx] = auxillaryArray[secondIdx];\r\n    auxillaryArray[secondIdx] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length)\r\n        return false;\r\n\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i])\r\n            return false;\r\n    }\r\n    return true;\r\n}","export function getSelectionSortAnimations(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    selectionSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"selection sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction selectionSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n\r\n    for (let i = 0; i < N - 1; i++) {\r\n        // Finding the index of the smallest element in the Unsorted Array\r\n        let minIdx = i;\r\n\r\n        for (let j = i + 1; j < N; j++) {\r\n            animations.push([\"comparison1\", j, minIdx]);\r\n            animations.push([\"comparison2\", j, minIdx]);\r\n\r\n            if (auxillaryArray[j] < auxillaryArray[minIdx])\r\n                minIdx = j;\r\n        }\r\n        animations.push([\"swap\", minIdx, auxillaryArray[i]]);\r\n        animations.push([\"swap\", i, auxillaryArray[minIdx]]);\r\n\r\n        // Swap the smallest element found with the element at the index being comaperd\r\n        swap(auxillaryArray, minIdx, i);\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIdx, secondIdx) {\r\n    let temp = auxillaryArray[firstIdx];\r\n    auxillaryArray[firstIdx] = auxillaryArray[secondIdx];\r\n    auxillaryArray[secondIdx] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length)\r\n        return false;\r\n\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i])\r\n            return false;\r\n    }\r\n    return true;\r\n}","import React from 'react';\r\nimport './SortingVisualizer.css'\r\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/BubbleSort';\r\nimport {getInsertionSortAnimations} from '../sortingAlgorithms/InsertionSort';\r\nimport {getMergeSortAnimations} from '../sortingAlgorithms/MergeSort';\r\nimport {getQuickSortAnimations} from '../sortingAlgorithms/QuickSort';\r\nimport {getSelectionSortAnimations} from '../sortingAlgorithms/SelectionSort';\r\n\r\n// Changing the Width and Height according to the Browser\r\nlet WINDOW_WIDTH = window.innerWidth;\r\nlet WINDOW_HEIGHT = window.innerHeight;\r\nlet NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 200) / 8);\r\n\r\nfunction reportWindowSize() {\r\n    WINDOW_WIDTH = window.innerWidth;\r\n    WINDOW_HEIGHT = window.innerHeight;\r\n    NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 200) / 8);\r\n}\r\n\r\nwindow.onresize = reportWindowSize; \r\n\r\nconst PRIMARY_COLOR = 'turquoise';  // Normal color of the bars\r\nconst SECONDARY_COLOR = 'red';      // Color of the bars when they rae being compared\r\nconst ANIMATION_SPEED_MS = 10       // Animation speed : how fast the color changes; the heights get overwritten\r\n\r\n// Tooltips for all the buttons\r\nconst DISABLED_BUTTON = \"Currently Disabled\"\r\nconst ENABLED_BUTTON = {\r\n    nlogn: \"O(NlogN) Time Complexity\",\r\n    nSquare: \"O(N^2) Time Complexity\"\r\n}\r\n\r\nclass SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { array: [] };\r\n    }\r\n\r\n    componentDidMount() {   this.resetArray();  }\r\n\r\n    // Generates new random Array\r\n    resetArray() {\r\n        const array = []\r\n\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(25, WINDOW_HEIGHT - 30));\r\n        }\r\n\r\n        this.setState({array: array});\r\n        this.restoreStoreButtons();\r\n    }\r\n\r\n    disableSortButtons() {\r\n        document.getElementById(\"bubbleSort\").disabled = true;\r\n        let buttonStyle = document.getElementById(\"bubbleSort\").style;\r\n        document.getElementById(\"bubbleSort\").title = DISABLED_BUTTON;\r\n        buttonStyle.cursor = \"default\";\r\n        buttonStyle.background = \"#000000\";\r\n        \r\n        document.getElementById(\"insertionSort\").disabled = true;\r\n        buttonStyle = document.getElementById(\"insertionSort\").style;\r\n        document.getElementById(\"insertionSort\").title = DISABLED_BUTTON;\r\n        buttonStyle.cursor = \"default\";\r\n        buttonStyle.background = \"#000000\";\r\n        \r\n        document.getElementById(\"mergeSort\").disabled = true;\r\n        buttonStyle = document.getElementById(\"mergeSort\").style;\r\n        document.getElementById(\"mergeSort\").title = DISABLED_BUTTON;\r\n        buttonStyle.cursor = \"default\";\r\n        buttonStyle.background = \"#000000\";\r\n\r\n        document.getElementById(\"quickSort\").disabled = true;\r\n        buttonStyle = document.getElementById(\"quickSort\").style;\r\n        document.getElementById(\"quickSort\").title = DISABLED_BUTTON;\r\n        buttonStyle.cursor = \"default\";\r\n        buttonStyle.background = \"#000000\";\r\n\r\n        document.getElementById(\"selectionSort\").disabled = true;\r\n        buttonStyle = document.getElementById(\"selectionSort\").style;\r\n        document.getElementById(\"selectionSort\").title = DISABLED_BUTTON;\r\n        buttonStyle.cursor = \"default\";\r\n        buttonStyle.background = \"#000000\";\r\n    }\r\n\r\n    restoreStoreButtons() {\r\n        document.getElementById(\"bubbleSort\").disabled = false;\r\n        let buttonStyle = document.getElementById(\"bubbleSort\").style;\r\n        document.getElementById(\"bubbleSort\").title = ENABLED_BUTTON.nlogn;\r\n        buttonStyle.cursor = \"pointer\";\r\n        buttonStyle.background = \"#47535E\";\r\n        \r\n        document.getElementById(\"insertionSort\").disabled = false;\r\n        buttonStyle = document.getElementById(\"insertionSort\").style;\r\n        document.getElementById(\"insertionSort\").title = ENABLED_BUTTON.nSquare;\r\n        buttonStyle.cursor = \"pointer\";\r\n        buttonStyle.background = \"#47535E\";\r\n\r\n        document.getElementById(\"mergeSort\").disabled = false;\r\n        buttonStyle = document.getElementById(\"mergeSort\").style;\r\n        document.getElementById(\"mergeSort\").title = ENABLED_BUTTON.nSquare;\r\n        buttonStyle.cursor = \"pointer\";\r\n        buttonStyle.background = \"#47535E\";\r\n\r\n        document.getElementById(\"quickSort\").disabled = false;\r\n        buttonStyle = document.getElementById(\"quickSort\").style;\r\n        document.getElementById(\"quickSort\").title = ENABLED_BUTTON.nSquare;\r\n        buttonStyle.cursor = \"pointer\";\r\n        buttonStyle.background = \"#47535E\";\r\n\r\n        document.getElementById(\"selectionSort\").disabled = false;\r\n        buttonStyle = document.getElementById(\"selectionSort\").style;\r\n        document.getElementById(\"selectionSort\").title = ENABLED_BUTTON.nlogn;\r\n        buttonStyle.cursor = \"pointer\";\r\n        buttonStyle.background = \"#47535E\";\r\n    }\r\n\r\n    // All the code for calling all the Sorting Algorithms and binding them to the \r\n    bubbleSort() {\r\n        this.disableSortButtons();\r\n\r\n        const [animations, sortArray] = getBubbleSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChanged = (i % 4 === 0) || (i % 4 === 1);\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n            if(isColorChanged === true) {\r\n                const color = (i % 4 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n                // If we don't multiply every animation by the index then,\r\n                // every i`th animation will wait for exactly ANIMATION_SPEED_MS\r\n                // and immediately change into final state\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [barIdx, newHeight] = animations[i];\r\n                if (barIdx === -1)  { continue; }\r\n\r\n                const barStyle = arrayBars[barIdx].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\r\n        setTimeout(() => this.restoreStoreButtons, RESTORE_TIME);\r\n    }\r\n\r\n    insertionSort() {\r\n        this.disableSortButtons();\r\n        const [animations, sortArray] = getInsertionSortAnimations(this.state.array);\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChanged = (animations[i][0] === \"comparison1\") ||\r\n                                    (animations[i][0] === \"comparison2\");\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n            if (isColorChanged === true) {\r\n                const color = (animations[i][0] === \"comparison1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [temp, barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [temp, barIdx, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barIdx].style;\r\n\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\r\n        setTimeout(() => this.restoreStoreButtons, RESTORE_TIME);\r\n    }\r\n\r\n    mergeSort() {\r\n        this.disableSortButtons();\r\n        const [animations, sortArray] = getMergeSortAnimations(this.state.array);\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChanged = (i % 3 !== 2);\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n            if (isColorChanged === true) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const color = (i % 3 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\r\n        setTimeout(() => this.restoreStoreButtons, RESTORE_TIME);\r\n    }\r\n\r\n    quickSort() {\r\n        this.disableSortButtons();\r\n        const [animations, sortArray] = getQuickSortAnimations(this.state.array);\r\n\r\n        for (let i = 0; i < animations.length - 1; i++) {\r\n            const isColorChanged = (i % 6 === 0) || (i % 6 === 1);\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n            if (isColorChanged === true) {\r\n                const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n\r\n                if (barOneIdx === -1) { continue; }\r\n\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [barIdx, newHeight] = animations[i];\r\n\r\n                if (barIdx === -1) { continue; }\r\n\r\n                const barStyle = arrayBars[barIdx].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\r\n        setTimeout(() => this.restoreStoreButtons, RESTORE_TIME);\r\n    }\r\n\r\n    selectionSort() {\r\n        this.disableSortButtons();\r\n        const [animations, sortArray] = getSelectionSortAnimations(this.state.array);\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChanged = (animations[i][0] === \"comparison1\") ||\r\n                                    (animations[i][0] === \"comparison2\");\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n            if (isColorChanged === true) {\r\n                const color = (animations[i][0] === \"comparison1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [temp, barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [temp, barIdx, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barIdx].style;\r\n\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\r\n        setTimeout(() => this.restoreStoreButtons, RESTORE_TIME);\r\n    }\r\n\r\n    render() {\r\n        const array = this.state.array;\r\n        const SORT_BUTTONS = 6;\r\n        const TOTAL_BUTTONS = 1 + SORT_BUTTONS;\r\n\r\n        return (\r\n            <>\r\n                <div className=\"array-container\" style={{position: 'absolute', right:`20px`}}>\r\n                    {array.map((value, idx) => (\r\n                        <div \r\n                            className=\"array-bar\"\r\n                            key={idx}\r\n                            style={{\r\n                                backgroundColor: PRIMARY_COLOR,\r\n                                height: `${value}px`\r\n                            }}>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <div className=\"buttons\">\r\n                    <button title=\"Generates a new random Array\" \r\n                        style={{position:'relative', top:`${0 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px`}}\r\n                        onClick={() => this.resetArray()}>Generate New Array</button>\r\n\r\n                    <button title=\"O(N^2) Time Complexity\" id=\"bubbleSort\"\r\n                        style={{position:'relative', top:`${0.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px`}}\r\n                        onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n\r\n                    <button title=\"O(N^2) Time Complexity\" id=\"insertionSort\"\r\n                        style={{position:'relative', top:`${1.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px`}}\r\n                        onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n\r\n                    <button title=\"O(NlogN) Time Complexity\" id=\"mergeSort\"\r\n                        style={{position:'relative', top:`${2.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px`}}\r\n                        onClick={() => this.mergeSort()}>Merge Sort</button>\r\n\r\n                    <button title=\"O(N^2) Time Complexity\" id=\"quickSort\"\r\n                        style={{position:'relative', top:`${3.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px`}}\r\n                        onClick={() => this.quickSort()}>Quick Sort</button>\r\n\r\n                    <button title=\"O(N^2) Time Complexity\" id=\"selectionSort\"\r\n                        style={{position:'relative', top:`${4.5 * (WINDOW_HEIGHT - 20) / TOTAL_BUTTONS}px`}}\r\n                        onClick={() => this.selectionSort()}>Selection Sort</button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default SortingVisualizer;","export function getInsertionSortAnimations(array) {\r\n    let animations = [];\r\n    let auxillaryArray = array.slice();\r\n    insertionSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"insertion sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction insertionSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 1; i < N; i++) {\r\n        let key = auxillaryArray[i];\r\n        let j = i - 1;\r\n        animations.push([\"comparison1\", j, i]);\r\n        animations.push([\"comparison2\", j, i]);\r\n        while (j >= 0 && auxillaryArray[j] > key) {\r\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\r\n            auxillaryArray[j + 1] = auxillaryArray[j];\r\n            j = j - 1;\r\n            if (j >= 0) {\r\n                animations.push([\"comparison1\", j, i]);\r\n                animations.push([\"comparison2\", j, i]);\r\n            }\r\n        }\r\n        animations.push([\"overwrite\", j + 1, key]);\r\n        auxillaryArray[j + 1] = key;\r\n    }\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length)\r\n        return false;\r\n\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n        if (firstArray[i] !== secondArray[i])\r\n            return false;\r\n    }\r\n    return true;\r\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}